rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get user's organization ID
    function getUserOrganization() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId;
    }
    
    // Helper function to check if user belongs to the same organization
    function isSameOrganization(orgId) {
      return isAuthenticated() && getUserOrganization() == orgId;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection
    match /users/{userId} {
      // Allow read if user can access the document
      allow read: if isAuthenticated() && 
                     (userId == request.auth.uid || 
                      (resource.data.organizationId != null && 
                       resource.data.organizationId == getUserOrganization()));
      
      // Allow create for new users (during signup)
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId;
      
      // Allow update only own profile or admin can update users in same org
      allow update: if isAuthenticated() && 
                       (userId == request.auth.uid || 
                        (isAdmin() && isSameOrganization(resource.data.organizationId)));
      
      // Allow delete only by admin in same organization
      allow delete: if isAdmin() && 
                       isSameOrganization(resource.data.organizationId);
    }
    
    // Organizations collection
    match /organizations/{orgId} {
      // Allow read if user belongs to this organization
      allow read: if isSameOrganization(orgId);
      
      // Allow create for new organizations
      allow create: if isAuthenticated();
      
      // Allow update/delete only by admin of the organization
      allow update, delete: if isAdmin() && isSameOrganization(orgId);
    }
    
    // User invitations collection
    match /user_invitations/{invitationId} {
      // Allow read if document belongs to user's organization
      allow read: if isAuthenticated() && 
                     (resource.data.organizationId == getUserOrganization());
      
      // Allow create only by admin
      allow create: if isAdmin();
      
      // Allow update for accepting invitation or admin updating
      allow update: if isAuthenticated() && 
                       (request.auth.token.email == resource.data.email || 
                        (isAdmin() && isSameOrganization(resource.data.organizationId)));
      
      // Allow delete only by admin in same organization
      allow delete: if isAdmin() && 
                       isSameOrganization(resource.data.organizationId);
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Allow read if document belongs to user's organization
      allow read: if isAuthenticated() && 
                     (resource.data.organizationId == getUserOrganization());
      
      // Allow create only by authenticated users in the organization
      allow create: if isAuthenticated() && 
                       isSameOrganization(request.resource.data.organizationId);
      
      // Allow update if user is admin or project creator/member
      allow update: if isAuthenticated() && 
                       isSameOrganization(resource.data.organizationId) &&
                       (isAdmin() || 
                        resource.data.createdBy == request.auth.uid ||
                        request.auth.uid in resource.data.members);
      
      // Allow delete only by admin or project creator
      allow delete: if isAuthenticated() && 
                       isSameOrganization(resource.data.organizationId) &&
                       (isAdmin() || resource.data.createdBy == request.auth.uid);
    }
    
    // User Groups collection
    match /user_groups/{groupId} {
      // Allow read if document belongs to user's organization
      allow read: if isAuthenticated() && 
                     (resource.data.organizationId == getUserOrganization());
      
      // Allow create only by admin
      allow create: if isAdmin() && 
                       isSameOrganization(request.resource.data.organizationId) &&
                       // Ensure members array contains valid user IDs from same org
                       request.resource.data.members is list;
      
      // Allow update only by admin in same organization
      allow update: if isAdmin() && 
                       isSameOrganization(resource.data.organizationId) &&
                       // Ensure organization ID doesn't change
                       request.resource.data.organizationId == resource.data.organizationId;
      
      // Allow delete only by admin in same organization
      allow delete: if isAdmin() && 
                       isSameOrganization(resource.data.organizationId);
    }
    
    // Tasks collection (future use)
    match /tasks/{taskId} {
      // Allow read if authenticated and same organization
      allow read: if isAuthenticated() && 
                     isSameOrganization(resource.data.organizationId);
      
      // Allow create by authenticated users
      allow create: if isAuthenticated() && 
                       isSameOrganization(request.resource.data.organizationId);
      
      // Allow update if user is assigned or admin
      allow update: if isAuthenticated() && 
                       isSameOrganization(resource.data.organizationId) &&
                       (isAdmin() || 
                        request.auth.uid == resource.data.assignedTo ||
                        request.auth.uid == resource.data.createdBy);
      
      // Allow delete only by admin or task creator
      allow delete: if isAuthenticated() && 
                       isSameOrganization(resource.data.organizationId) &&
                       (isAdmin() || request.auth.uid == resource.data.createdBy);
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
