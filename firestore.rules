rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Organizations collection - allow anyone to create (for signup)
    match /organizations/{organizationId} {
      // Allow anyone to create (needed for signup)
      allow create: if request.auth != null;
      
      // Allow authenticated users to read
      allow read: if request.auth != null;
      
      // Allow organization admin to update
      allow update: if request.auth != null;
    }
    
    // Projects collection - organization-scoped access
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // User invitations - organization-scoped with public read for validation
    match /user_invitations/{invitationId} {
      // Allow anyone to read for code validation during signup
      allow read: if true;
      
      // Allow deletion (needed when invitation is accepted)
      allow delete: if true;
      
      // Allow authenticated users to create/update invitations
      allow create: if request.auth != null;
      allow update: if request.auth != null;
    }
    
    // Location settings
    match /location_settings/{organizationId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
    }
    
    // Work locations
    match /work_locations/{locationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // Organization schedules (management)
    match /organizations/{organizationId}/schedules/{scheduleId} {
      // Read: Admin/Manager in same organization
      allow read: if request.auth != null &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == organizationId &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel in ['Admin', 'Manager'];

      // Create: Admin/Manager in same organization, with valid fields
      allow create: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == organizationId &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel in ['Admin', 'Manager'] &&
                      request.resource.data.organizationId == organizationId &&
                      request.resource.data.userId is string &&
                      request.resource.data.title is string &&
                      request.resource.data.date is timestamp &&
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.createdAt is timestamp;

      // Update/Delete: Admin/Manager within org
      allow update, delete: if request.auth != null &&
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == organizationId &&
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel in ['Admin', 'Manager'];
    }
    
    // Users collection - organization-scoped access
    match /users/{userId} {
      // Allow authenticated users to read
      allow read: if request.auth != null;
      
      // Allow anyone to create (needed for signup and invitation acceptance)
      allow create: if true;
      
      // Allow authenticated users to update
      allow update: if request.auth != null;
      
      // Leave subcollection for each user
      match /leaves/{leaveId} {
        // Allow users to read their own leave requests
        allow read: if request.auth != null && 
                       (
                         // Owner can read own leaves
                         request.auth.uid == userId || 
                         // Admin/Manager can read leaves within their organization only
                         (
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel in ['Admin', 'Manager'] &&
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == resource.data.organizationId
                         )
                       );
        
        // Allow users to create their own leave requests
        allow create: if request.auth != null && 
                         request.auth.uid == userId &&
                         request.resource.data.userId == userId &&
                         request.resource.data.organizationId is string &&
                         request.resource.data.leaveTypeId is string &&
                         request.resource.data.startDate is timestamp &&
                         request.resource.data.endDate is timestamp &&
                         request.resource.data.numberOfDays is number &&
                         request.resource.data.reason is string &&
                         request.resource.data.status == 'pending' &&
                         request.resource.data.createdAt is timestamp;
        
        // Allow users to cancel their own pending requests
        allow update: if request.auth != null && 
                         request.auth.uid == userId &&
                         resource.data.status == 'pending' &&
                         request.resource.data.status == 'cancelled';
        
        // Allow admins/managers to update any leave request (approve/reject)
  allow update: if request.auth != null && 
       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel in ['Admin', 'Manager'] &&
       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == resource.data.organizationId &&
                         request.resource.data.status in ['approved', 'rejected'] &&
                         request.resource.data.reviewedBy == request.auth.uid &&
                         request.resource.data.reviewedAt is timestamp;
        
        // Prevent deletion of leave requests (for audit trail)
        allow delete: if false;
      }
    }

    // Wildcard rule to support collection group queries on any `leaves` subcollection
    match /{path=**}/leaves/{leaveId} {
      // Allow users to read their own leave requests
      allow read: if request.auth != null && 
                     (
                       request.auth.uid == resource.data.userId ||
                       (
                         // Admin/Manager can read leaves within their organization only
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel in ['Admin', 'Manager'] &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == resource.data.organizationId
                       )
                     );

      // Allow admins/managers to update any leave request (approve/reject) within their org
      allow update: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel in ['Admin', 'Manager'] &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == resource.data.organizationId &&
                       request.resource.data.status in ['approved', 'rejected'] &&
                       request.resource.data.reviewedBy == request.auth.uid &&
                       request.resource.data.reviewedAt is timestamp;

      // Prevent deletion of leave requests (for audit trail)
      allow delete: if false;
    }
  }
}